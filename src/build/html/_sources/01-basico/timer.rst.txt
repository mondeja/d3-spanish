*********************
Timer --- `d3-timer`_
*********************

.. raw:: html

   <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.min.js"></script>

Funciones útiles
================

`d3.now()`_
-----------

Devuelve el tiempo actual en unix timestamps. Esta función asegura consistenca temporal durante el manejo de eventos.

Temporizadores
==============

`d3.timer()`_
-------------

Ejecuta un temporizador, invocando un callback específico repetidamente hasta que el temporizador es apagado. Se puede pasa un numero al parámetro opcional ``delay`` en milisegundos para invocar al callback después de este tiempo.

.. rubric:: Input

.. code-block:: js

   t = d3.timer(function(elapsed) {
       console.log(elapsed);
       if (elapsed > 300) { t.stop() };
   }, 250)


.. rubric:: Output

::

   12
   72
   94
   168
   236
   252
   272
   308

`timer.restart()`_
------------------

Reinicia un temporizador con un ``callback`` especificado y con parametros opcionales ``delay`` y ``time``. Esta función es equivalente a para el temporizador y crear uno nuevo con los argumentos provistos, sin embargo este temporizador retiene la prioridad de la invocación anterior.

.. rubric:: Input

.. code-block:: js

   var restarted = false;
   var callback = function(elapsed){
       console.log(elapsed);
       if (elapsed > 100) {
           if (restarted == false) {
               restarted = true;
               console.log("");
               t.restart(callback, 200);
           } else {
               t.stop();
           };
       };
   };

   var t = d3.timer(callback, 200);

::

   36
   84
   94
   118

   52
   58
   172

.. raw:: html

   <script>
     var restarted = false;
     var callback = function(elapsed){
         console.log(elapsed);
         if (elapsed > 100) {
             if (restarted == false) {
                 restarted = true;
                 console.log("");
                 t.restart(callback, 200);
             } else {
                 t.stop();
             };
         };
     };

     var t = d3.timer(callback, 200);
   </script>

.. _d3-timer: https://github.com/d3/d3-timer

.. _d3.now: https://github.com/d3/d3-timer/blob/master/README.md#now
.. _d3.timer: https://github.com/d3/d3-timer/blob/master/README.md#timer